// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"fmt"
	"github.com/flowkater/ddd-todo-app/config"
	command2 "github.com/flowkater/ddd-todo-app/internal/application/command"
	query2 "github.com/flowkater/ddd-todo-app/internal/application/query"
	"github.com/flowkater/ddd-todo-app/internal/domain/service"
	"github.com/flowkater/ddd-todo-app/internal/infrastructure/persistence/command"
	"github.com/flowkater/ddd-todo-app/internal/infrastructure/persistence/database"
	"github.com/flowkater/ddd-todo-app/internal/infrastructure/persistence/ent"
	"github.com/flowkater/ddd-todo-app/internal/infrastructure/persistence/query"
	"github.com/flowkater/ddd-todo-app/internal/interfaces/http"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer(cfg *config.Config) (*http.Server, error) {
	todoService := service.NewTodoService()
	v, err := provideEntOptions(cfg)
	if err != nil {
		return nil, err
	}
	client := ent.NewClient(v...)
	todoRepository := command.NewTodoRepository(client)
	todoCommandUsecase := command2.NewTodoCommandUsecase(todoService, todoRepository)
	queryTodoRepository := query.NewTodoRepository(client)
	todoQueryUsecase := query2.NewTodoQueryUsecase(queryTodoRepository)
	app := http.NewFiberApp(todoCommandUsecase, todoQueryUsecase)
	todoHandler := http.NewTodoHandler(todoCommandUsecase, todoQueryUsecase)
	server := http.NewServer(app, cfg, todoHandler)
	return server, nil
}

// wire.go:

func provideEntOptions(cfg *config.Config) ([]ent.Option, error) {
	drv, err := database.NewPostgresDriver(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to create postgres driver: %v", err)
	}

	client := ent.NewClient(ent.Driver(drv))

	if err := database.RunMigration(client); err != nil {
		return nil, fmt.Errorf("failed to run migration: %v", err)
	}

	return []ent.Option{ent.Driver(drv)}, nil
}

var infrastructureSet = wire.NewSet(
	provideEntOptions, ent.NewClient, command.NewTodoRepository, query.NewTodoRepository,
)

var serviceSet = wire.NewSet(service.NewTodoService)

var handlerSet = wire.NewSet(command2.NewTodoCommandUsecase, query2.NewTodoQueryUsecase, http.NewTodoHandler)

var serverSet = wire.NewSet(http.NewFiberApp, http.NewServer)
